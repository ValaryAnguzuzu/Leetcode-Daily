# 141. Linked List Cycle
# Given head, the head of a linked list, determine if the linked list has a cycle in it.

# There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.

# Return true if there is a cycle in the linked list. Otherwise, return false.

 

# Example 1:

    #figure
# Input: head = [3,2,0,-4], pos = 1
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).
# Example 2:

    #figure
# Input: head = [1,2], pos = 0
# Output: true
# Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.
# Example 3:

    #figure
# Input: head = [1], pos = -1
# Output: false
# Explanation: There is no cycle in the linked list.
 

# Constraints:

# The number of the nodes in the list is in the range [0, 104].
# -105 <= Node.val <= 105
# pos is -1 or a valid index in the linked-list.
 

# Follow up: Can you solve it using O(1) (i.e. constant) memory?


#Definition for singly-linked list.
class ListNode(object):
    def __init__(self, x):
        self.val = x
        self.next = None

class Solution(object):
    def hasCycle(self, head):
        """
        :type head: ListNode
        :rtype: bool
        Approach: Hare and Tortoise approoach; two pointers
        TC: O(n)
        SC:O(1)
        """

#two pointers, fast and slow
#move fast two nodes at a time and slow 1 node at a time while fast and fast.next != none
#if fast == slow and return True

        fast = head
        slow = head

        while fast and fast.next: #iterate only to end of list
            fast = fast.next.next
            slow = slow.next
            if fast == slow:
                return True
        return False



# Helper function to create a linked list from a list and return the head
def create_linked_list(values, pos):
    """
    Creates a linked list with the given values and introduces a cycle if pos >= 0.
    :param values: List of node values
    :param pos: Index (0-based) where the tail points to form a cycle, or -1 for no cycle
    :return: The head of the linked list
    """
    if not values:
        return None

    nodes = [ListNode(val) for val in values]
    for i in range(len(nodes) - 1):
        nodes[i].next = nodes[i + 1]

    # Introduce a cycle if pos is valid
    if pos >= 0:
        nodes[-1].next = nodes[pos]

    return nodes[0]

# Test cases
if __name__ == "__main__":
    solution = Solution()

    # Test case 1: Cycle present
    head = create_linked_list([3, 2, 0, -4], 1)
    print(solution.hasCycle(head))  # Output: True

    # Test case 2: Cycle present
    head = create_linked_list([1, 2], 0)
    print(solution.hasCycle(head))  # Output: True

    # Test case 3: No cycle
    head = create_linked_list([1], -1)
    print(solution.hasCycle(head))  # Output: False

    # Test case 4: Empty list
    head = create_linked_list([], -1)
    print(solution.hasCycle(head))  # Output: False

    # Test case 5: No cycle, multiple nodes
    head = create_linked_list([1, 2, 3, 4, 5], -1)
    print(solution.hasCycle(head))  # Output: False

